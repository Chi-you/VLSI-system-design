0010_0000_0000_0001_0101_0000_0000_0000 // LD R0 NUM1(ADDR:21)
0111_0000_0000_0000_0000_0000_0000_0000 // CMP R0 R0    // R0 = 6 (N)
0010_0000_0000_0001_0110_0000_0000_0001 // LD R1 NUM2(ADDR:22)
1000_1000_1111_1111_1111_0000_0000_0001 // SHF(LEFT) R1 1 // R1 = 0 (F0) //T0
0010_0000_0000_0001_0110_0000_0000_0010 // LD R2 NUM2
1001_1000_1111_1111_1111_0000_0000_0010 // ROT(LEFT) R2 1 // R2 = 1 (F1) //T1
1011_0000_0000_0000_0010_0000_0000_0011 // MOV R3 R2      // R3 = i //T2
0000_0000_0000_0000_0000_0000_0000_0000 // NOP
0110_1000_0000_0000_0010_0000_0000_0011 // MUL R3 2       // begin from i = 2 (2*1)
1011_0000_0000_0000_0000_0000_0000_0100 // MOV R4 R0      // R4 (the number of loop )//T3 
0000_0000_0000_0000_0000_0000_0000_0000 // NOP 
0101_0000_0000_0000_0011_0000_0000_0100 // LOOP:SUB R4 R3 (CCODE => ZERO/NEG) 
0001_0100_0000_0000_0000_0000_0001_0011 // BRA <ADDR:19> ZERO
1011_0000_0000_0000_0000_0000_0000_0100 // MOV R4 R0      // recover R4 
1011_0000_0000_0000_0010_0000_0000_0101 // MOV R5 R2 // (R5 = T4)
0100_0000_0000_0000_0001_0000_0000_0010 // ADD R2 R1
1011_0000_0000_0000_0101_0000_0000_0001 // MOV R1 R5
0100_1000_0000_0000_0001_0000_0000_0011 // ADD R3 1
0001_0000_0000_0000_0000_0000_0000_1011 // BRA <ADDR:11> ALW
0011_0000_0000_0000_0010_0000_0001_0111 // STR <ADDR:24> R2 
1010_1111_1111_1111_1111_1111_1111_1111 // HLT
1111_1111_1111_1111_1111_1111_1111_0101 // NUM1  // IF CMP => 10
1000_0000_0000_0000_0000_0000_0000_0000 // NUM2  // IF LEFT ROTATE => 7, IF LEFT SHIFT => 6
